buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath libs.mysql_connector_java
    }
}

plugins {
    //id 'com.github.johnrengelman.shadow' version '2.0.0'
    id "com.benjaminsproule.swagger" version "0.1.9"

    //plugin to generate a list of licennces for all deps and to check for incompatibilities
    //usage: honkerCheck honkerGenNotice honkerGenDependencies
    //search for NOTICE.txt and DEPENDENCIES.txt
    //id "org.nosphere.honker" version "0.3.0"
    id 'org.flywaydb.flyway' version '5.0.7'
}

ext.moduleName = 'stroom.app'

def uiDir = project.file('src/main/resources/ui')
def swaggerDir = "${uiDir}/swagger"
def jarName = 'stroom-app.jar'
def fatJarName = 'stroom-app-all.jar'

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
mainClassName = 'stroom.startup.App'

jar {
    //we need to first generate the swagger spec files so they can be added in to the jar
    mustRunAfter generateSwaggerDocumentation

    manifest {
        attributes(
                "Implementation-Title": "Stroom",
                "Implementation-Version": versions.stroom,
                "Main-Class": "stroom.startup.App"
        )
    }
    archiveName jarName

    exclude '**/gwt-unitCache'
}

shadowJar {
    // Allows us to build fat jars with lots of files
    zip64 true

    // A transformer to merges files in META-INF/services
    mergeServiceFiles()

    archiveName fatJarName

    exclude '**/gwt-unitCache'
}

dependencies {
    compile project(':stroom-core-shared')
    compile project(':stroom-core-server')
    compile project(':stroom-pipeline')
    compile project(':stroom-proxy')
    compile project(':stroom-config:stroom-config-app')
    compile project(':stroom-config:stroom-config-global-impl-db')
    //compile project(':stroom-explorer:stroom-explorer-api')
    compile project(':stroom-explorer:stroom-explorer-impl')
    compile project(':stroom-importexport:stroom-importexport-api')
    compile project(':stroom-security:stroom-security-server')
    compile project(':stroom-index:stroom-index-server')
    compile project(':stroom-docstore:stroom-docstore-impl')
    compile project(':stroom-pipeline')
    compile project(':stroom-dashboard:stroom-dashboard-server')
    compile project(':stroom-statistics:stroom-statistics-server')
    compile project(':stroom-externaldoc:stroom-externaldoc-server')
    compile project(':stroom-elastic:stroom-elastic-impl')
    compile project(':stroom-elastic:stroom-elastic-impl-http')
    compile project(':stroom-ruleset:stroom-ruleset-server')
    compile project(':stroom-ruleset:stroom-ruleset-shared')
    compile project(':stroom-data-meta:stroom-data-meta-impl-db')
    compile project(':stroom-data-store:stroom-data-store-impl-fs')
    compile project(':stroom-kafka:stroom-kafka-impl')
    compile project(':stroom-kafka:stroom-kafka-pipeline')

    compile libs.stroomDocRef

    compile libs.dropwizard_lifecycle
    compile libs.guava
    compile libs.guice3
    //compile libs.jackson_annotations
    compile libs.javax_inject
    //compile libs.javax_activation
    //compile libs.javax_activation_impl
    //compile libs.jaxb_api
    //compile libs.jaxb_core
    //compile libs.jaxb_impl
    compile libs.jcommander
    compile libs.jetty_servlet

    compile(libs.dropwizard_assets) {
        exclude(group: "org.glassfish.web", module: "javax.el")
    }
    compile(libs.dropwizard_core) {
        exclude(group: "org.glassfish.web", module: "javax.el")
    }
    compile libs.dropwizard_jersey
    compile libs.dropwizard_jetty
    compile libs.dropwizard_metrics_healthchecks
    compile libs.dropwizard_servlets
    compile libs.dropwizard_metrics_annotation
    compile libs.dropwizard_configuration
    compile libs.flyway_core
    compile libs.guava
    compile libs.javax_inject
    compile libs.javax_servlet_api
    compile libs.jetty_server
    compile libs.jetty_servlets
    compile libs.logback_classic
    compile libs.slf4j_api
    compile libs.ws_rs_api

    runtime libs.javax_el
    runtime libs.javax_el_api
}

run {
//    //Ensure we have the latest kafka plugin jar available for runtime
//    dependsOn ':stroom-kafka:stroom-kafka-client-impl_0_10_0_1:copyPluginJar'
    args 'server', './dev.yml'
}

runShadow {
//    //Ensure we have the latest kafka plugin jar available for runtime
//    dependsOn ':stroom-kafka:stroom-kafka-client-impl_0_10_0_1:copyPluginJar'
    args 'server', './dev.yml'
}

//The gwtCompile tasks create files in stroom-app/src/main/resources/ui
//so those tasks MUST be run before processResource else this jar and 
//the fat jar will be missing all the GWT generated files and the UI will fail to start
processResources.mustRunAfter(':stroom-app-gwt:gwtCompile')
processResources.mustRunAfter(':stroom-dashboard-gwt:gwtCompile')

def dockerBuildDir = "${projectDir}/docker/build"

clean {
    delete dockerBuildDir
}

//Copy all the files needed by the docker build into stroom-app/docker/build
task copyFilesForDockerBuild() {
    dependsOn shadowJar
//    dependsOn tasks.getByPath(':stroom-kafka:stroom-kafka-client-impl_0_10_0_1:shadowJar')
//    dependsOn tasks.getByPath(':stroom-elastic:stroom-elastic-client-impl_5_6_4:shadowJar')
    doFirst {
//        new File(stroomPluginsDir).mkdirs()

        // Copy the stroom app fat jar
        copy {
            from "${project.buildDir}/libs/${fatJarName}"
            into dockerBuildDir
        }

//        // Copy the kafka client fat jar
//        copy {
//            from project(':stroom-kafka:stroom-kafka-client-impl_0_10_0_1').file('build/libs/stroom-kafka-client-impl_0_10_0_1-all.jar')
//            into dockerBuildDir
//        }
//
//        // Copy the elastic client fat jar
//        copy {
//            from project(':stroom-elastic:stroom-elastic-impl-http').file('build/libs/stroom-elastic-impl-http.jar')
//            into dockerBuildDir
//        }

        // Copy the dropwizard yml configuration
        copy {
            from "${projectDir}/prod.yml"
            into dockerBuildDir
        }
    }
}

swagger {
    apiSource {
        outputFormats = 'json,yaml'
        locations = [
                'stroom.statistics.sql.search.SqlStatisticsQueryResource',
                'stroom.index.StroomIndexQueryResource',
                'stroom.security.AuthorisationResource']
        schemes = [
                'http',
                'https']
        host = 'localhost:8080'
        basePath = '/api'
        info {
            title = 'stroom API'
            version = 'v1'
            description = 'Various APIs for interacting with stroom and its data'
            contact {
                name = 'GCHQ'
                url = 'https://github.com/gchq/stroom'
            }
            license {
                url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
                name = 'Apache 2.0'
            }
        }
        outputPath = "${swaggerDir}/document.html"
        swaggerDirectory = "${swaggerDir}"
    }
}

task dist(type: Zip) {
    from 'src/dist'
    from shadowJar.outputs.files
}

tasks.build.dependsOn generateSwaggerDocumentation
tasks.build.dependsOn copyFilesForDockerBuild
tasks.build.dependsOn shadowJar

//commented out in case we decide to use this plugin
//honker {
//// Your project license
//license 'Apache 2'

//// Your project information, used to generate NOTICE files
//projectName 'Stroom'
//projectTimespan '2016-2017'
//projectOrganization 'GCHQ'

//// For dependencies that contains no licensing information (pom, manifest etc..)
//// you can define your licensing strategy, for example:
////licenseOverride { candidate ->
////if( candidate.group == 'something' && candidate.module == 'whatever' ) {
////candidate.license = 'BSD 3-Clause'
////}
////}
//}
